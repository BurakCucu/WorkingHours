{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2024-09-29T07:41:39.404977Z", "invocation_id": "55f4a003-abbb-4e2e-8cdc-6a0405e61cab", "env": {}, "project_id": "fec873fae79a71f92b1470090198b000", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "sqlserver"}, "nodes": {"model.L2O.Metadata_PrecomputedValues": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.as_varchar"], "nodes": ["model.L2O.Cases", "model.L2O.Event_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "Metadata_PrecomputedValues"], "unique_id": "model.L2O.Metadata_PrecomputedValues", "raw_code": "with Cases as (\n    select * from {{ ref('Cases') }}\n),\n\nEvent_log as (\n    select * from {{ ref('Event_log') }}\n),\n\nMetadata_PrecomputedValues as (\n    select\n        {{ pm_utils.as_varchar('Number of cases') }} as \"Key\",\n        count(*) as \"Value\"\n    from Cases\n    union\n    select\n        {{ pm_utils.as_varchar('Number of events') }} as \"Key\",\n        count(*) as \"Value\"\n    from Event_log\n)\n\nselect * from Metadata_PrecomputedValues", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "Metadata_PrecomputedValues.sql", "original_file_path": "models\\Metadata_PrecomputedValues.sql", "name": "Metadata_PrecomputedValues", "alias": "Metadata_PrecomputedValues", "checksum": {"name": "sha256", "checksum": "73ada670b5018ff1394077c2873c6f28692664195c331a3221f0b8da12ed6961"}, "tags": [], "refs": [["Cases"], ["Event_log"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.366764}, "model.L2O.Event_log_input": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.star", "macro.pm_utils.mandatory", "macro.pm_utils.optional", "macro.pm_utils.create_index"], "nodes": ["source.L2O.sources.Event_log_raw", "source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ pm_utils.create_index(source('sources', 'Event_log_raw')) }}", "transaction": true, "index": null}]}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "1_input", "Event_log_input"], "unique_id": "model.L2O.Event_log_input", "raw_code": "{{ config(\n    pre_hook=\"{{ pm_utils.create_index(source('sources', 'Event_log_raw')) }}\"\n) }}\n\n{% set source_table = source('sources', 'Event_log_raw') %}\n\n/* Input table for the event log containing case and event properties.\nThe macro optional() creates the field with null values when it is not present in the source table.\nConvert the non-text fields to the correct data type. */\nwith Event_log_input as (\n    select\n        -- Select all fields in the source table. Fields that need type casting are defined separately with the appropriate type casting applied.\n        {{ pm_utils.star(source_table, except=['Event_end', 'Automated', 'Event_cost', 'Event_processing_time', 'Event_start', 'User',\n            'Case', 'Case_status', 'Case_type', 'Case_value'] ) }},\n        -- Mandatory\n        -- The Case_ID and Activity fields are mandatory text fields that don't need to be type casted. \n        {{ pm_utils.mandatory(source_table, '\"Event_end\"', 'datetime') }} as \"Event_end\",\n        -- Optional\n        {{ pm_utils.optional(source_table, '\"Automated\"', 'boolean') }} as \"Automated\",\n        {{ pm_utils.optional(source_table, '\"Event_cost\"', 'double') }} as \"Event_cost\",\n        {{ pm_utils.optional(source_table, '\"Event_processing_time\"', 'integer') }} as \"Event_processing_time\",\n        {{ pm_utils.optional(source_table, '\"Event_start\"', 'datetime') }} as \"Event_start\",\n        {{ pm_utils.optional(source_table, '\"User\"') }} as \"User\",\n        {{ pm_utils.optional(source_table, '\"Case\"') }} as \"Case\",\n        {{ pm_utils.optional(source_table, '\"Case_status\"') }} as \"Case_status\",\n        {{ pm_utils.optional(source_table, '\"Case_type\"') }} as \"Case_type\",\n        {{ pm_utils.optional(source_table, '\"Case_value\"', 'double') }} as \"Case_value\"\n    from {{ source_table }}\n)\n\nselect * from Event_log_input", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "1_input\\Event_log_input.sql", "original_file_path": "models\\1_input\\Event_log_input.sql", "name": "Event_log_input", "alias": "Event_log_input", "checksum": {"name": "sha256", "checksum": "31d81eb48e3367cf2cf9e20c12334a985bb41383c13437a3a9238a9866e092f0"}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"], ["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": ["{{ pm_utils.create_index(source('sources', 'Event_log_raw')) }}"]}, "created_at": 1727591481.3857613}, "model.L2O.Cases": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.id"], "nodes": ["model.L2O.Event_log_input"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "2_objects", "Cases"], "unique_id": "model.L2O.Cases", "raw_code": "with Event_log_input as (\n    select * from {{ ref('Event_log_input') }}\n),\n\n/* Aggregate of the event log table to define a cases table with case fields.*/\nCases as (\n    select\n        Event_log_input.\"Case_ID\",\n        min(Event_log_input.\"Case\") as \"Case\",\n        min(Event_log_input.\"Case_status\") as \"Case_status\",\n        min(Event_log_input.\"Case_type\") as \"Case_type\",\n        min(Event_log_input.\"Case_value\") as \"Case_value\",\n        count(*) as \"Event_count\"\n    from Event_log_input\n    group by Event_log_input.\"Case_ID\"\n)\n\nselect\n    *,\n    {{ pm_utils.id() }} as \"Case_ID_internal\"\nfrom Cases", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "2_objects\\Cases.sql", "original_file_path": "models\\2_objects\\Cases.sql", "name": "Cases", "alias": "Cases", "checksum": {"name": "sha256", "checksum": "477f8d4a478fb7b7751667a884860c416796ba91709dfccd8018043b069c41a2"}, "tags": [], "refs": [["Event_log_input"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.49007}, "model.L2O.Activity_configuration": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.to_varchar", "macro.pm_utils.to_integer"], "nodes": ["seed.L2O.Activity_configuration_raw"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "4_event_logs", "Activity_configuration"], "unique_id": "model.L2O.Activity_configuration", "raw_code": "with Activity_configuration_raw as (\n    select * from {{ ref('Activity_configuration_raw') }}\n),\n\n-- Cast fields from the seeds file to the correct data type.\nActivity_configuration as (\n    select\n        {{ pm_utils.to_varchar('Activity_configuration_raw.\"Activity\"') }} as \"Activity\",\n        {{ pm_utils.to_integer('Activity_configuration_raw.\"Activity_order\"') }} as \"Activity_order\"\n    from Activity_configuration_raw\n)\n\nselect * from Activity_configuration", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "4_event_logs\\Activity_configuration.sql", "original_file_path": "models\\4_event_logs\\Activity_configuration.sql", "name": "Activity_configuration", "alias": "Activity_configuration", "checksum": {"name": "sha256", "checksum": "1ca12092a1a644604f391468528242e741336a0b7a030221b45a390535e59e55"}, "tags": [], "refs": [["Activity_configuration_raw"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.4981022}, "model.L2O.Automation_estimates": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.to_varchar", "macro.pm_utils.to_double", "macro.pm_utils.to_integer"], "nodes": ["seed.L2O.Automation_estimates_raw"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "4_event_logs", "Automation_estimates"], "unique_id": "model.L2O.Automation_estimates", "raw_code": "with Automation_estimates_raw as (\n    select * from {{ ref('Automation_estimates_raw') }}\n),\n\n-- Cast fields from the seeds file to the correct data type.\nAutomation_estimates as (\n    select\n        {{ pm_utils.to_varchar('Automation_estimates_raw.\"Activity\"') }} as \"Activity\",\n        {{ pm_utils.to_double('Automation_estimates_raw.\"Event_cost\"') }} as \"Event_cost\",\n        {{ pm_utils.to_integer('Automation_estimates_raw.\"Event_processing_time\"') }} as \"Event_processing_time\"\n    from Automation_estimates_raw\n)\n\nselect * from Automation_estimates", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "4_event_logs\\Automation_estimates.sql", "original_file_path": "models\\4_event_logs\\Automation_estimates.sql", "name": "Automation_estimates", "alias": "Automation_estimates", "checksum": {"name": "sha256", "checksum": "16e4e2742217405d5d2755e0569ba89b92d8257cf45a858505502783517ff607"}, "tags": [], "refs": [["Automation_estimates_raw"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.5050657}, "model.L2O.Event_log": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.star", "macro.pm_utils.id"], "nodes": ["model.L2O.Activity_configuration", "model.L2O.Automation_estimates", "model.L2O.Cases", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "4_event_logs", "Event_log"], "unique_id": "model.L2O.Event_log", "raw_code": "with Activity_configuration as (\n    select * from {{ ref('Activity_configuration') }}\n),\n\nAutomation_estimates as (\n    select * from {{ ref('Automation_estimates') }}\n),\n\nCases as (\n    select * from {{ ref('Cases') }}\n),\n\nEvent_log as (\n    select\n        Cases.\"Case_ID_internal\",\n        {{ pm_utils.star(ref('Event_log_input'), except=['Event_cost', 'Event_processing_time', 'Case', 'Case_status', 'Case_type', 'Case_value']) }},\n        coalesce({{ ref('Event_log_input') }}.\"Event_cost\", Automation_estimates.\"Event_cost\") as \"Event_cost\",\n        coalesce({{ ref('Event_log_input') }}.\"Event_processing_time\", Automation_estimates.\"Event_processing_time\") as \"Event_processing_time\",\n        Activity_configuration.\"Activity_order\"\n    from {{ ref('Event_log_input') }}\n    left join Activity_configuration\n        on {{ ref('Event_log_input') }}.\"Activity\" = Activity_configuration.\"Activity\"\n    left join Automation_estimates\n        on {{ ref('Event_log_input') }}.\"Activity\" = Automation_estimates.\"Activity\"\n    left join Cases\n        on {{ ref('Event_log_input') }}.\"Case_ID\" = Cases.\"Case_ID\"\n)\n\nselect\n    *,\n    {{ pm_utils.id() }} as \"Event_ID\"\nfrom Event_log", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "4_event_logs\\Event_log.sql", "original_file_path": "models\\4_event_logs\\Event_log.sql", "name": "Event_log", "alias": "Event_log", "checksum": {"name": "sha256", "checksum": "64e37762c360aa08dddba36e133a1619c6032e74a028130da090d7b373304deb"}, "tags": [], "refs": [["Activity_configuration"], ["Automation_estimates"], ["Cases"], ["Event_log_input"], ["Event_log_input"], ["Event_log_input"], ["Event_log_input"], ["Event_log_input"], ["Event_log_input"], ["Event_log_input"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.5121}, "model.L2O.Due_dates": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.as_varchar", "macro.pm_utils.to_timestamp", "macro.pm_utils.to_boolean", "macro.pm_utils.to_double", "macro.pm_utils.datediff", "macro.pm_utils.id"], "nodes": ["model.L2O.Cases", "model.L2O.Event_log", "model.L2O.Due_dates_configuration"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "5_business_logic", "Due_dates"], "unique_id": "model.L2O.Due_dates", "raw_code": "with Cases as (\n    select * from {{ ref('Cases') }}\n),\n\nEvent_log as (\n    select * from {{ ref('Event_log') }}\n),\n\nDue_dates_configuration as (\n    select * from {{ ref('Due_dates_configuration') }}\n),\n\n/* Table containing all definitions of the due dates. */\nDue_dates_base as (\n    select\n        Event_log.\"Case_ID\",\n        {{ pm_utils.as_varchar('The name of the due date') }} as \"Due_date\",\n        Event_log.\"Event_end\" as \"Actual_date\",\n        -- Add logic which should be used as the Expected_date timestamp field\n        {{ pm_utils.to_timestamp('null') }} as \"Expected_date\"\n    from Event_log\n    -- Insert your logic to determine when the due date should be calculated\n    where 1 = 0\n),\n\n-- Join with the due dates configuration for additional properties.\nDue_dates as (\n    select\n        Due_dates_base.\"Case_ID\",\n        Due_dates_base.\"Due_date\",\n        Due_dates_base.\"Actual_date\",\n        Due_dates_base.\"Expected_date\",\n        Due_dates_configuration.\"Due_date_type\",\n        case\n            when Due_dates_base.\"Actual_date\" <= Due_dates_base.\"Expected_date\"\n                then {{ pm_utils.to_boolean('true') }}\n            else {{ pm_utils.to_boolean('false') }}\n        end as \"On_time\",\n        case\n            -- when the due date is not configured, the cost is null\n            when (\n                Due_dates_configuration.\"Fixed_costs\" is null\n                or (Due_dates_configuration.\"Fixed_costs\" = {{ pm_utils.to_boolean('false') }} and (Due_dates_configuration.\"Time\" is null or Due_dates_configuration.\"Time_type\" is null))\n            )\n                then {{ pm_utils.to_double('null') }}\n            -- when the due date is configured and on time, the cost is 0\n            when Due_dates_base.\"Actual_date\" <= Due_dates_base.\"Expected_date\"\n                then {{ pm_utils.to_double('0') }}\n            -- when the costs are fixed, the cost is known\n            when Due_dates_configuration.\"Fixed_costs\" = {{ pm_utils.to_boolean('true') }}\n                then Due_dates_configuration.\"Cost\"\n            -- when the costs are not fixed, the cost is calculated based on time and time_type\n            when Due_dates_configuration.\"Time_type\" = 'millisecond'\n                then floor({{ pm_utils.datediff('millisecond', 'Due_dates_base.\"Expected_date\"', 'Due_dates_base.\"Actual_date\"') }} / Due_dates_configuration.\"Time\") * Due_dates_configuration.\"Cost\"\n            when Due_dates_configuration.\"Time_type\" = 'second'\n                then floor({{ pm_utils.datediff('millisecond', 'Due_dates_base.\"Expected_date\"', 'Due_dates_base.\"Actual_date\"') }} / 1000 / Due_dates_configuration.\"Time\") * Due_dates_configuration.\"Cost\"\n            when Due_dates_configuration.\"Time_type\" = 'minute'\n                then floor({{ pm_utils.datediff('millisecond', 'Due_dates_base.\"Expected_date\"', 'Due_dates_base.\"Actual_date\"') }} / (60 * 1000) / Due_dates_configuration.\"Time\") * Due_dates_configuration.\"Cost\"\n            when Due_dates_configuration.\"Time_type\" = 'hour'\n                then floor({{ pm_utils.datediff('millisecond', 'Due_dates_base.\"Expected_date\"', 'Due_dates_base.\"Actual_date\"') }} / (60 * 60 * 1000) / Due_dates_configuration.\"Time\") * Due_dates_configuration.\"Cost\"\n            when Due_dates_configuration.\"Time_type\" = 'day'\n                then floor({{ pm_utils.datediff('millisecond', 'Due_dates_base.\"Expected_date\"', 'Due_dates_base.\"Actual_date\"') }} / (24 * 60 * 60 * 1000) / Due_dates_configuration.\"Time\") * Due_dates_configuration.\"Cost\"\n            else {{ pm_utils.to_double('null') }}\n        end as \"Cost\",\n        {{ pm_utils.datediff('millisecond', 'Due_dates_base.\"Expected_date\"', 'Due_dates_base.\"Actual_date\"') }} as \"Difference\"\n    from Due_dates_base\n    left join Due_dates_configuration\n        on Due_dates_base.\"Due_date\" = Due_dates_configuration.\"Due_date\"\n)\n\nselect\n    Due_dates.*,\n    {{ pm_utils.id() }} as \"Due_date_ID\",\n    Cases.\"Case_ID_internal\"\nfrom Due_dates\nleft join Cases\n    on Due_dates.\"Case_ID\" = Cases.\"Case_ID\"", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "5_business_logic\\Due_dates.sql", "original_file_path": "models\\5_business_logic\\Due_dates.sql", "name": "Due_dates", "alias": "Due_dates", "checksum": {"name": "sha256", "checksum": "1cb912c8a9be5f2ff2318a2fd8934ce5980bfd184b2fbd02b139b6f9ceff6cb4"}, "tags": [], "refs": [["Cases"], ["Event_log"], ["Due_dates_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.5211022}, "model.L2O.Due_dates_configuration": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.to_varchar", "macro.pm_utils.to_boolean", "macro.pm_utils.to_double", "macro.pm_utils.to_integer"], "nodes": ["seed.L2O.Due_dates_configuration_raw"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "5_business_logic", "Due_dates_configuration"], "unique_id": "model.L2O.Due_dates_configuration", "raw_code": "with Due_dates_configuration_raw as (\n    select * from {{ ref('Due_dates_configuration_raw') }}\n),\n\n-- Cast fields from the seed file to the correct data type.\nDue_dates_configuration as (\n    select\n        {{ pm_utils.to_varchar('Due_dates_configuration_raw.\"Due_date\"') }} as \"Due_date\",\n        {{ pm_utils.to_varchar('Due_dates_configuration_raw.\"Due_date_type\"') }} as \"Due_date_type\",\n        {{ pm_utils.to_boolean('Due_dates_configuration_raw.\"Fixed_costs\"') }} as \"Fixed_costs\",\n        {{ pm_utils.to_double('Due_dates_configuration_raw.\"Cost\"') }} as \"Cost\",\n        {{ pm_utils.to_integer('Due_dates_configuration_raw.\"Time\"') }} as \"Time\",\n        {{ pm_utils.to_varchar('Due_dates_configuration_raw.\"Time_type\"') }} as \"Time_type\"\n    from Due_dates_configuration_raw\n)\n\nselect * from Due_dates_configuration", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "5_business_logic\\Due_dates_configuration.sql", "original_file_path": "models\\5_business_logic\\Due_dates_configuration.sql", "name": "Due_dates_configuration", "alias": "Due_dates_configuration", "checksum": {"name": "sha256", "checksum": "d3d29b4d2536d8cc5e27bc1d05b8d801d0ca10f710bf36e1081ad15f2b994564"}, "tags": [], "refs": [["Due_dates_configuration_raw"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.5381005}, "model.L2O.Tags": {"resource_type": "model", "depends_on": {"macros": ["macro.pm_utils.as_varchar", "macro.pm_utils.id"], "nodes": ["model.L2O.Event_log", "model.L2O.Cases"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "5_business_logic", "Tags"], "unique_id": "model.L2O.Tags", "raw_code": "with Event_log as (\n    select * from {{ ref('Event_log') }}\n),\n\nCases as (\n    select * from {{ ref('Cases') }}\n),\n\n-- Cases with rework, where the same activity is executed by different users.\n-- Use select distinct to only get one record per case when multiple activities show this behavior.\nCases_with_rework_different_users as (\n    select distinct\n        Actitvities_per_user.\"Case_ID\"\n    from (\n        select\n            Event_log.\"Case_ID\",\n            Event_log.\"Activity\"\n        from Event_log\n        group by Event_log.\"Case_ID\", Event_log.\"Activity\", Event_log.\"User\"\n    ) as Actitvities_per_user\n    -- When a case has multiple records of an activity after grouped by user, it was executed by different users.\n    group by Actitvities_per_user.\"Case_ID\", Actitvities_per_user.\"Activity\"\n    having count(*) > 1\n),\n\nEvent_log_tag_preprocessing as (\n    -- Create new fields to determine if a tag occurs\n    select\n        Event_log.\"Case_ID\"\n    from Event_log\n    -- Determine the applicable filtering\n    where 1 = 0\n    group by Event_log.\"Case_ID\"\n),\n\nTags as (\n    select\n        Cases_with_rework_different_users.\"Case_ID\",\n        {{ pm_utils.as_varchar('Multiple users for same activity') }} as \"Tag\",\n        {{ pm_utils.as_varchar('Rework') }} as \"Tag_type\"\n    from Cases_with_rework_different_users\n    union all\n    -- Tag example based on Cases\n    select\n        Cases.\"Case_ID\",\n        {{ pm_utils.as_varchar('The name of the tag') }} as \"Tag\",\n        {{ pm_utils.as_varchar('The type of the tag') }} as \"Tag_type\"\n    from Cases\n    -- Insert your logic to determine when the tag should trigger\n    where 1 = 0\n    union all\n    -- Tag example based on Event log\n    select\n        Event_log_tag_preprocessing.\"Case_ID\",\n        {{ pm_utils.as_varchar('The name of the tag') }} as \"Tag\",\n        {{ pm_utils.as_varchar('The type of the tag') }} as \"Tag_type\"\n    from Event_log_tag_preprocessing\n    -- Insert your logic to determine when the tag should trigger\n    where 1 = 0\n)\n\nselect\n    Tags.*,\n    {{ pm_utils.id() }} as \"Tag_ID\",\n    Cases.\"Case_ID_internal\"\nfrom Tags\nleft join Cases\n    on Tags.\"Case_ID\" = Cases.\"Case_ID\"", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "5_business_logic\\Tags.sql", "original_file_path": "models\\5_business_logic\\Tags.sql", "name": "Tags", "alias": "Tags", "checksum": {"name": "sha256", "checksum": "550cb06c5897b72cf9854f5c24bd27fe1c119fee5d4d033afb813f60c3c8f960"}, "tags": [], "refs": [["Event_log"], ["Cases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1727591481.5470638}, "seed.L2O.Activity_configuration_raw": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "Activity_configuration_raw"], "unique_id": "seed.L2O.Activity_configuration_raw", "raw_code": "", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "Activity_configuration_raw.csv", "original_file_path": "seeds\\Activity_configuration_raw.csv", "name": "Activity_configuration_raw", "alias": "Activity_configuration_raw", "checksum": {"name": "sha256", "checksum": "31fec98ae449286247202396aa7716aede1d9f897f9f3b7cc85701cb6dbb871e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "full_refresh": true}, "created_at": 1727591481.5690646}, "seed.L2O.Automation_estimates_raw": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "Automation_estimates_raw"], "unique_id": "seed.L2O.Automation_estimates_raw", "raw_code": "", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "Automation_estimates_raw.csv", "original_file_path": "seeds\\Automation_estimates_raw.csv", "name": "Automation_estimates_raw", "alias": "Automation_estimates_raw", "checksum": {"name": "sha256", "checksum": "8cb6c3e5109468384e1cb3d3dffb6c8b91122813e4ab9d8e5fe3a0b02722c282"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "full_refresh": true}, "created_at": 1727591481.5720644}, "seed.L2O.Due_dates_configuration_raw": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "PM_Template", "schema": "L2O_schema", "fqn": ["L2O", "Due_dates_configuration_raw"], "unique_id": "seed.L2O.Due_dates_configuration_raw", "raw_code": "", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "Due_dates_configuration_raw.csv", "original_file_path": "seeds\\Due_dates_configuration_raw.csv", "name": "Due_dates_configuration_raw", "alias": "Due_dates_configuration_raw", "checksum": {"name": "sha256", "checksum": "5874f5269204e90aa50b4e7554570b3ec42d5613d3623ede3655f90713541567"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "full_refresh": true}, "created_at": 1727591481.5750656}, "test.L2O.pm_utils_source_exists_sources_Event_log_raw_.eae1483ed6": {"test_metadata": {"name": "exists", "kwargs": {"model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_exists", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_exists_sources_Event_log_raw_"], "unique_id": "test.L2O.pm_utils_source_exists_sources_Event_log_raw_.eae1483ed6", "raw_code": "{{ pm_utils.test_exists(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_exists_sources_Event_log_raw_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_exists_sources_Event_log_raw_", "alias": "pm_utils_source_exists_sources_Event_log_raw_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": ""}, "created_at": 1727591481.6262913, "column_name": null, "file_key_name": "sources.sources"}, "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Activity_.9b19520fac": {"test_metadata": {"name": "exists", "kwargs": {"column_name": "\"Activity\"", "model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_exists", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_exists_sources_Event_log_raw__Activity_"], "unique_id": "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Activity_.9b19520fac", "raw_code": "{{ pm_utils.test_exists(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_exists_sources_Event_log_raw__Activity_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_exists_sources_Event_log_raw__Activity_", "alias": "pm_utils_source_exists_sources_Event_log_raw__Activity_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": ""}, "created_at": 1727591481.6482923, "column_name": "\"Activity\"", "file_key_name": "sources.sources"}, "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Activity_.5d56f44bb8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"Activity\"", "model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_not_null_sources_Event_log_raw__Activity_"], "unique_id": "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Activity_.5d56f44bb8", "raw_code": "{{ pm_utils.test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_not_null_sources_Event_log_raw__Activity_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_not_null_sources_Event_log_raw__Activity_", "alias": "pm_utils_source_not_null_sources_Event_log_raw__Activity_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "", "severity": "warn"}, "created_at": 1727591481.655331, "column_name": "\"Activity\"", "file_key_name": "sources.sources"}, "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Case_ID_.0f866aa594": {"test_metadata": {"name": "exists", "kwargs": {"column_name": "\"Case_ID\"", "model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_exists", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_exists_sources_Event_log_raw__Case_ID_"], "unique_id": "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Case_ID_.0f866aa594", "raw_code": "{{ pm_utils.test_exists(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_exists_sources_Event_log_raw__Case_ID_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_exists_sources_Event_log_raw__Case_ID_", "alias": "pm_utils_source_exists_sources_Event_log_raw__Case_ID_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": ""}, "created_at": 1727591481.6752937, "column_name": "\"Case_ID\"", "file_key_name": "sources.sources"}, "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Case_ID_.e978fef3b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"Case_ID\"", "model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_not_null_sources_Event_log_raw__Case_ID_"], "unique_id": "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Case_ID_.e978fef3b3", "raw_code": "{{ pm_utils.test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_not_null_sources_Event_log_raw__Case_ID_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_not_null_sources_Event_log_raw__Case_ID_", "alias": "pm_utils_source_not_null_sources_Event_log_raw__Case_ID_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": ""}, "created_at": 1727591481.6812935, "column_name": "\"Case_ID\"", "file_key_name": "sources.sources"}, "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Event_end_.4c7d9176e0": {"test_metadata": {"name": "exists", "kwargs": {"column_name": "\"Event_end\"", "model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_exists", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_exists_sources_Event_log_raw__Event_end_"], "unique_id": "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Event_end_.4c7d9176e0", "raw_code": "{{ pm_utils.test_exists(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_exists_sources_Event_log_raw__Event_end_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_exists_sources_Event_log_raw__Event_end_", "alias": "pm_utils_source_exists_sources_Event_log_raw__Event_end_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": ""}, "created_at": 1727591481.6882906, "column_name": "\"Event_end\"", "file_key_name": "sources.sources"}, "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Event_end_.4d5752ea60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"Event_end\"", "model": "{{ get_where_subquery(source('sources', 'Event_log_raw')) }}"}, "namespace": "pm_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.pm_utils.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.L2O.sources.Event_log_raw"]}, "config": {"enabled": true, "alias": null, "schema": "", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "PM_Template", "schema": "L2O_schema_", "fqn": ["L2O", "schema", "pm_utils_source_not_null_sources_Event_log_raw__Event_end_"], "unique_id": "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Event_end_.4d5752ea60", "raw_code": "{{ pm_utils.test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "pm_utils_source_not_null_sources_Event_log_raw__Event_end_.sql", "original_file_path": "models\\schema\\sources.yml", "name": "pm_utils_source_not_null_sources_Event_log_raw__Event_end_", "alias": "pm_utils_source_not_null_sources_Event_log_raw__Event_end_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["sources", "Event_log_raw"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "", "severity": "warn"}, "created_at": 1727591481.6962917, "column_name": "\"Event_end\"", "file_key_name": "sources.sources"}}, "sources": {"source.L2O.sources.Event_log_raw": {"fqn": ["L2O", "schema", "sources", "Event_log_raw"], "database": "PM_Template", "schema": "L2O_schema", "unique_id": "source.L2O.sources.Event_log_raw", "package_name": "L2O", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours", "path": "models\\schema\\sources.yml", "original_file_path": "models\\schema\\sources.yml", "name": "Event_log_raw", "source_name": "sources", "source_description": "", "loader": "", "identifier": "Event_log_raw", "resource_type": "source", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"\"Activity\"": {"name": "\"Activity\"", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "\"Case_ID\"": {"name": "\"Case_ID\"", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "\"Event_end\"": {"name": "\"Event_end\"", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"PM_Template\".\"L2O_schema\".\"Event_log_raw\"", "created_at": 1727591481.7042913}}, "macros": {"macro.dbt_sqlserver.sqlserver__get_show_grant_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_show_grant_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__get_show_grant_sql", "macro_sql": "{% macro sqlserver__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.336205, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_grant_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_grant_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__get_grant_sql", "macro_sql": "\n\n\n{%- macro sqlserver__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3382058, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_revoke_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_revoke_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__get_revoke_sql", "macro_sql": "{%- macro sqlserver__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3392065, "supported_languages": null}, "macro.dbt_sqlserver.get_provision_sql": {"unique_id": "macro.dbt_sqlserver.get_provision_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3398273, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__apply_grants": {"unique_id": "macro.dbt_sqlserver.sqlserver__apply_grants", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__apply_grants", "macro_sql": "{% macro sqlserver__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3442063, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sqlserver__get_columns_in_relation", "macro_sql": "{% macro sqlserver__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n    with\n        regular_db_cols as (\n            select\n                ordinal_position,\n                column_name,\n                data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from [{{ relation.database }}].INFORMATION_SCHEMA.COLUMNS\n            where table_name = '{{ relation.identifier }}'\n              and table_schema = '{{ relation.schema }}'\n        ),\n\n        temp_db_cols as (\n            select\n                ordinal_position,\n                column_name collate database_default as column_name,\n                data_type collate database_default as data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from tempdb.INFORMATION_SCHEMA.COLUMNS\n            where table_name like '{{ relation.identifier }}%'\n        ),\n\n        all_cols as (\n            select *\n            from regular_db_cols\n            union\n            select *\n            from temp_db_cols\n        )\n\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from\n        all_cols\n    order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.347205, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_query": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_query", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sqlserver__get_columns_in_query", "macro_sql": "{% macro sqlserver__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3478565, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_column_type": {"unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sqlserver__alter_column_type", "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') -%}\n\n    alter {{ relation.type }} {{ relation }} add {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter {{ relation.type }} {{ relation }} drop column {{ column_name }};\n    exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n\n  {%- endcall -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.349205, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__current_timestamp": {"unique_id": "macro.dbt_sqlserver.sqlserver__current_timestamp", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() -%}\n  SYSDATETIME()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3502066, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "sqlserver__create_clustered_columnstore_index", "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n  {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n  {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n  {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n  use [{{ relation.database }}];\n  if EXISTS (\n        SELECT * FROM\n        sys.indexes WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n  DROP index {{full_relation}}.{{cci_name}}\n  CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3613558, "supported_languages": null}, "macro.dbt_sqlserver.drop_xml_indexes": {"unique_id": "macro.dbt_sqlserver.drop_xml_indexes", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n\n{{ log(\"Running drop_xml_indexes() macro...\") }}\n\ndeclare @drop_xml_indexes nvarchar(max);\nselect @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n\tfrom sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'XML'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_xml_indexes;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3622057, "supported_languages": null}, "macro.dbt_sqlserver.drop_spatial_indexes": {"unique_id": "macro.dbt_sqlserver.drop_spatial_indexes", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ log(\"Running drop_spatial_indexes() macro...\") }}\n\ndeclare @drop_spatial_indexes nvarchar(max);\nselect @drop_spatial_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'Spatial'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_spatial_indexes;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3632069, "supported_languages": null}, "macro.dbt_sqlserver.drop_fk_constraints": {"unique_id": "macro.dbt_sqlserver.drop_fk_constraints", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n{{ log(\"Running drop_fk_constraints() macro...\") }}\n\ndeclare @drop_fk_constraints nvarchar(max);\nselect @drop_fk_constraints = (\n    select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n    from sys.foreign_keys\n    inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n    where sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3642068, "supported_languages": null}, "macro.dbt_sqlserver.drop_pk_constraints": {"unique_id": "macro.dbt_sqlserver.drop_pk_constraints", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_xml_indexes() }}\n\n{{ drop_spatial_indexes() }}\n\n{{ drop_fk_constraints() }}\n\n{{ log(\"Running drop_pk_constraints() macro...\") }}\n\ndeclare @drop_pk_constraints nvarchar(max);\nselect @drop_pk_constraints = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n    from sys.indexes\n    inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n    where sys.indexes.is_primary_key = 1\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.drop_xml_indexes", "macro.dbt_sqlserver.drop_spatial_indexes", "macro.dbt_sqlserver.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3642068, "supported_languages": null}, "macro.dbt_sqlserver.drop_all_indexes_on_table": {"unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_pk_constraints() }}\n\n{{ log(\"Dropping remaining indexes...\") }}\n\ndeclare @drop_remaining_indexes_last nvarchar(max);\nselect @drop_remaining_indexes_last = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.drop_pk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3652058, "supported_languages": null}, "macro.dbt_sqlserver.create_clustered_index": {"unique_id": "macro.dbt_sqlserver.create_clustered_index", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n\n{{ log(\"Creating clustered index...\") }}\n\n{% set idx_name = this.table + '__clustered_index_on_' + columns|join('_') %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\n\ncreate\n{% if unique -%}\nunique\n{% endif %}\nclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\nend\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.366205, "supported_languages": null}, "macro.dbt_sqlserver.create_nonclustered_index": {"unique_id": "macro.dbt_sqlserver.create_nonclustered_index", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n{{ log(\"Creating nonclustered index...\") }}\n\n{% if includes -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") + '_includes_' + includes|join('_')|replace(\" \", \"_\") %}\n{% else -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") %}\n{% endif %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\ncreate nonclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n      {% if includes -%}\n        include ({{ '[' + includes|join(\"], [\") + ']' }})\n      {% endif %}\nend\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.368204, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__get_catalog", "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas\n    ),\n\n    tables as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables\n    ),\n\n    tables_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views\n    ),\n\n    views_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n            column_name,\n            ordinal_position as column_index,\n            data_type as column_type\n        from INFORMATION_SCHEMA.COLUMNS\n\n    )\n\n    select\n        cols.table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n             join cols on tv.schema_name = cols.table_schema and tv.table_name = cols.table_name\n    order by column_index\n\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3722055, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_name": {"unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_name", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__information_schema_name", "macro_sql": "{% macro sqlserver__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3722055, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_schemas": {"unique_id": "macro.dbt_sqlserver.sqlserver__list_schemas", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__list_schemas", "macro_sql": "{% macro sqlserver__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    USE {{ database }};\n    select  name as [schema]\n    from sys.schemas\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.373204, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__check_schema_exists": {"unique_id": "macro.dbt_sqlserver.sqlserver__check_schema_exists", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__check_schema_exists", "macro_sql": "{% macro sqlserver__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    --USE {{ database_name }}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.373204, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_relations_without_caching": {"unique_id": "macro.dbt_sqlserver.sqlserver__list_relations_without_caching", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__list_relations_without_caching", "macro_sql": "{% macro sqlserver__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from [{{ schema_relation.database }}].INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.375208, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__make_temp_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__make_temp_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__make_temp_relation", "macro_sql": "{% macro sqlserver__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = '#' ~  base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3782065, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__drop_relation", "macro_sql": "{% macro sqlserver__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ sqlserver__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.sqlserver__drop_relation_script"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3782065, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation_script": {"unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation_script", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__drop_relation_script", "macro_sql": "{% macro sqlserver__drop_relation_script(relation) -%}\n  {% if relation.type == 'view' -%}\n   {% set object_id_type = 'V' %}\n   {% elif relation.type == 'table'%}\n   {% set object_id_type = 'U' %}\n   {%- else -%} invalid target name\n   {% endif %}\n  USE [{{ relation.database }}];\n  if object_id ('{{ relation.include(database=False) }}','{{ object_id_type }}') is not null\n      begin\n      drop {{ relation.type }} {{ relation.include(database=False) }}\n      end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.380205, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__rename_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__rename_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__rename_relation", "macro_sql": "{% macro sqlserver__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    USE [{{ to_relation.database }}];\n    EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n    IF EXISTS(\n    SELECT *\n    FROM sys.indexes\n    WHERE name='{{ from_relation.schema }}_{{ from_relation.identifier }}_cci' and object_id = OBJECT_ID('{{ from_relation.schema }}.{{ to_relation.identifier }}'))\n    EXEC sp_rename N'{{ from_relation.schema }}.{{ to_relation.identifier }}.{{ from_relation.schema }}_{{ from_relation.identifier }}_cci', N'{{ from_relation.schema }}_{{ to_relation.identifier }}_cci', N'INDEX'\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3812044, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_schema": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_schema", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "sqlserver__create_schema", "macro_sql": "{% macro sqlserver__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.without_identifier().schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.without_identifier().schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.383205, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_schema": {"unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "sqlserver__drop_schema", "macro_sql": "{% macro sqlserver__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      IF EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n      BEGIN\n      EXEC('DROP SCHEMA {{ relation.schema }}')\n      END  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.drop_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3842049, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "name": "sqlserver__get_incremental_default_sql", "macro_sql": "{% macro sqlserver__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.385259, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "sqlserver__get_merge_sql", "macro_sql": "{% macro sqlserver__get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, predicates) }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3872051, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "sqlserver__get_delete_insert_merge_sql", "macro_sql": "{% macro sqlserver__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n\n      {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n      {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not string %}\n      delete from {{ target }}\n          where exists (\n                SELECT NULL\n                FROM\n                  {{ source }}\n                WHERE\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n      {% else %}\n      delete from {{ target }}\n          where (\n                {{ unique_key }}) in (\n      select ({{ unique_key }})\n      from {{ source }}\n          );\n\n      {% endif %}\n      {% endif %}\n\n      insert into {{ target }} ({{ dest_cols_csv }})\n          (\n      select {{ dest_cols_csv }}\n      from {{ source }}\n          )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3892047, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "sqlserver__get_insert_overwrite_merge_sql", "macro_sql": "{% macro sqlserver__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3902051, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_table_as": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "sqlserver__create_table_as", "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n   {%- set as_columnstore = config.get('as_columnstore', default=true) -%}\n   {% set tmp_relation = relation.incorporate(\n   path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n   type='view')-%}\n   {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {{ sqlserver__drop_relation_script(relation) }}\n\n   USE [{{ relation.database }}];\n   EXEC('create view {{ tmp_relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n\n   SELECT * INTO {{ relation }} FROM\n    {{ tmp_relation }}\n\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {% if not temporary and as_columnstore -%}\n   {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_sqlserver.sqlserver__drop_relation_script", "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3932061, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_exec": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_view_exec", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "sqlserver__create_view_exec", "macro_sql": "{% macro sqlserver__create_view_exec(relation, sql) -%}\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    execute('create view {{ relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3942065, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_as": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "sqlserver__create_view_as", "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n    USE [{{ relation.database }}];\n    {{ sqlserver__create_view_exec(relation, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3942065, "supported_languages": null}, "macro.dbt_sqlserver.calc_batch_size": {"unique_id": "macro.dbt_sqlserver.calc_batch_size", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns,max_batch_size) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% if num_columns * max_batch_size < 2100 %}\n    {% set batch_size = max_batch_size %}\n    {% else %}\n    {% set batch_size = (2100 / num_columns)|int %}\n    {% endif %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3972044, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_binding_char": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "sqlserver__get_binding_char", "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.3972044, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_batch_size": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "sqlserver__get_batch_size", "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.398205, "supported_languages": null}, "macro.dbt_sqlserver.basic_load_csv_rows": {"unique_id": "macro.dbt_sqlserver.basic_load_csv_rows", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4012053, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__load_csv_rows": {"unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "sqlserver__load_csv_rows", "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set max_batch_size = get_batch_size() %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(cols_sql|length, max_batch_size) %}\n\n  {{ return(basic_load_csv_rows(model, batch_size, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt_sqlserver.calc_batch_size", "macro.dbt_sqlserver.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4022062, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__post_snapshot": {"unique_id": "macro.dbt_sqlserver.sqlserver__post_snapshot", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "sqlserver__post_snapshot", "macro_sql": "{% macro sqlserver__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4022062, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_columns": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_columns", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4032054, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_true_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_true_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "sqlserver__get_true_sql", "macro_sql": "{% macro sqlserver__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4032054, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "sqlserver__snapshot_merge_sql", "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) %}\n  {{ default__snapshot_merge_sql(target, source, insert_cols) }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4042053, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments": {"unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "sqlserver__snapshot_hash_arguments", "macro_sql": "{% macro sqlserver__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(max)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4052052, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time": {"unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "sqlserver__snapshot_string_as_time", "macro_sql": "{% macro sqlserver__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2, '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4052052, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_test_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "sqlserver__get_test_sql", "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.407205, "supported_languages": null}, "macro.dbt_sqlserver.materialization_test_sqlserver": {"unique_id": "macro.dbt_sqlserver.materialization_test_sqlserver", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_sqlserver", "macro_sql": "{%- materialization test, adapter='sqlserver' -%}\n\n  {% set relations = [] %}\n\n  {% set identifier = model['alias'] %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n\n  {% if old_relation %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% elif not old_relation %}\n    {% do adapter.create_schema(target_relation) %}\n  {% endif %}\n\n  {% call statement(auto_begin=True) %}\n      {{ create_table_as(False, target_relation, sql) }}\n  {% endcall %}\n\n  {% set main_sql %}\n      select *\n      from {{ target_relation }}\n  {% endset %}\n\n  {{ adapter.commit() }}\n\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {% if should_store_failures() %}\n    {% do relations.append(target_relation) %}\n  {% elif not should_store_failures() %}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql", "macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.412701, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__any_value": {"unique_id": "macro.dbt_sqlserver.sqlserver__any_value", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "sqlserver__any_value", "macro_sql": "{% macro sqlserver__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4137018, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__array_construct": {"unique_id": "macro.dbt_sqlserver.sqlserver__array_construct", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "sqlserver__array_construct", "macro_sql": "{% macro sqlserver__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4137018, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__cast_bool_to_text": {"unique_id": "macro.dbt_sqlserver.sqlserver__cast_bool_to_text", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "sqlserver__cast_bool_to_text", "macro_sql": "{% macro sqlserver__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4147015, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__concat": {"unique_id": "macro.dbt_sqlserver.sqlserver__concat", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "sqlserver__concat", "macro_sql": "{% macro sqlserver__concat(fields) -%}\n    concat({{ fields|join(', ') }}, '')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4147015, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__dateadd": {"unique_id": "macro.dbt_sqlserver.sqlserver__dateadd", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime)\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4157019, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__date_trunc": {"unique_id": "macro.dbt_sqlserver.sqlserver__date_trunc", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "sqlserver__date_trunc", "macro_sql": "{% macro sqlserver__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4157019, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__hash": {"unique_id": "macro.dbt_sqlserver.sqlserver__hash", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "sqlserver__hash", "macro_sql": "{% macro sqlserver__hash(field) %}\n    convert(varchar(50), hashbytes('md5', {{field}}), 2)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4167023, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__last_day": {"unique_id": "macro.dbt_sqlserver.sqlserver__last_day", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "sqlserver__last_day", "macro_sql": "{% macro sqlserver__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.418805, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__length": {"unique_id": "macro.dbt_sqlserver.sqlserver__length", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "sqlserver__length", "macro_sql": "{% macro sqlserver__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.418805, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__listagg": {"unique_id": "macro.dbt_sqlserver.sqlserver__listagg", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "sqlserver__listagg", "macro_sql": "{% macro sqlserver__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4197016, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__position": {"unique_id": "macro.dbt_sqlserver.sqlserver__position", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "sqlserver__position", "macro_sql": "{% macro sqlserver__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4197016, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__safe_cast": {"unique_id": "macro.dbt_sqlserver.sqlserver__safe_cast", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "sqlserver__safe_cast", "macro_sql": "{% macro sqlserver__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4207017, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__split_part": {"unique_id": "macro.dbt_sqlserver.sqlserver__split_part", "package_name": "dbt_sqlserver", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "sqlserver__split_part", "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n\n    LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4217014, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4247012, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4247012, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4258091, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4258091, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4267015, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4277022, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4277022, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4277022, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4287016, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4287016, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.429701, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.429701, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.431701, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4327013, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.433702, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4347003, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4377003, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4407, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4409792, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4417017, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.442703, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.442703, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4437008, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4457004, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4457004, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4477012, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4497035, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4507797, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.451702, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.451702, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4527018, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4537022, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4577034, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4587035, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4597034, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4607027, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4617023, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4630234, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4637039, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4657059, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4657059, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4667037, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4707034, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4717038, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4717038, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4727023, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.473704, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.474703, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4827032, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4837053, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4847047, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4857018, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4867032, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4877045, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4892826, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.489703, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4917045, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4927847, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4937088, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4947026, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.496046, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4978518, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4987028, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4997015, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.4997015, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.500701, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.501702, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.501702, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.501702, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.503701, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.503701, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.503701, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.504701, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5052724, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5057008, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5057008, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5067043, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.512702, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5157003, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5177002, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5177002, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.521701, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5227, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5237002, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5257003, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5267012, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5277863, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5287035, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5297053, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5307014, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5317004, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5317004, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5327003, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.533701, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5347004, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5357144, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5357144, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5367014, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5397005, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5397005, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5407002, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.540986, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.540986, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5447035, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5467026, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5487015, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5493338, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5507014, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5627003, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5637002, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5717006, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.576702, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.577703, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5797, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.580277, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5817013, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5907028, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5947013, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5977006, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.5997005, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6017, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6017, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6029108, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6037009, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6037009, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6047003, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.605703, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6067016, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6077032, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6077032, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6087055, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6107023, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6107023, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6117015, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6127017, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6187007, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.622702, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6243787, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6247017, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6247017, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.625704, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6267045, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6277037, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6337008, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.642704, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.644703, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.645769, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.646702, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6477044, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6477044, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6487033, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6487033, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6487033, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6497033, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6507018, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.651703, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.65574, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.6947112, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7047033, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7058437, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7067032, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.707705, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7082202, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7094088, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7112558, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7142296, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7162347, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7182302, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7192297, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7352307, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.736229, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7372289, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7453153, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7462301, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.747236, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.749554, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7502303, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7502303, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.75423, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.757675, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7592301, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7604833, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7652276, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7672296, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.768228, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7712283, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.772228, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7732291, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7742867, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.775231, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7762337, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7772439, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7782998, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.779235, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7802432, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7812295, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.782228, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.782228, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.783228, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7842278, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7842278, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7852278, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7862277, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7862277, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.789263, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.789263, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.790229, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.790229, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7912571, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7912571, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7923367, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7923367, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7932346, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7932346, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7942324, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7942324, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7952309, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7962298, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.7972362, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.799301, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.800253, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8012278, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8012278, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8023114, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8023114, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.803238, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.803238, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.804228, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.804228, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8052275, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8052275, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8062286, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8072278, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8076112, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8076112, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.808642, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8096237, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.812966, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8146193, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.81562, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.81562, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8166196, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8176177, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8176177, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8186178, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8196187, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8196187, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8206198, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8216193, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8226178, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8226178, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8236175, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8253512, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8256197, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8269877, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8276186, "supported_languages": null}, "macro.pm_utils.stddev": {"unique_id": "macro.pm_utils.stddev", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\aggregate_functions\\stddev.sql", "original_file_path": "macros\\aggregate_functions\\stddev.sql", "name": "stddev", "macro_sql": "{% macro stddev(field, relation) %}\n\n{%- if target.type == 'snowflake' -%}\n    stddev({{ field }})\n{%- elif target.type == 'sqlserver' -%}\n    stdev({{ field }})\n{%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8286178, "supported_languages": null}, "macro.pm_utils.string_agg": {"unique_id": "macro.pm_utils.string_agg", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\aggregate_functions\\string_agg.sql", "original_file_path": "macros\\aggregate_functions\\string_agg.sql", "name": "string_agg", "macro_sql": "{%- macro string_agg(string_field, delimiter) -%}\n\n{# Aggregation of string fields separated by the delimiter.\n   This function can only be used as an aggregate. #}\n{%- if target.type == 'snowflake' -%}\n    {%- if delimiter is defined -%}\n        nullif(listagg({{ string_field }}, '{{ delimiter }}'), '')\n    {%- else -%}\n        nullif(listagg({{ string_field }}, ', '), '')\n    {%- endif -%}\n{%- elif target.type == 'sqlserver' -%}\n    {%- if delimiter is defined -%}\n        nullif(string_agg(convert(nvarchar(2000), {{ string_field}}), '{{ delimiter }}'), '')\n    {%- else -%}\n        nullif(string_agg(convert(nvarchar(2000), {{ string_field}}), ', '), '')\n    {%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.829619, "supported_languages": null}, "macro.pm_utils.as_varchar": {"unique_id": "macro.pm_utils.as_varchar", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\as_varchar.sql", "original_file_path": "macros\\data_type_cast_functions\\as_varchar.sql", "name": "as_varchar", "macro_sql": "{%- macro as_varchar(field) -%}\n\n{%- if target.type == 'snowflake' -%}\n    to_varchar('{{ field }}')\n{%- elif target.type == 'sqlserver' -%}\n    convert(nvarchar(2000), '{{ field }}')\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8316195, "supported_languages": null}, "macro.pm_utils.to_boolean": {"unique_id": "macro.pm_utils.to_boolean", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\to_boolean.sql", "original_file_path": "macros\\data_type_cast_functions\\to_boolean.sql", "name": "to_boolean", "macro_sql": "{%- macro to_boolean(field, relation) -%}\n\n{# Snowflake try_to function requires an expression of type varchar. #}\n{%- if target.type == 'snowflake' -%}\n    {%- if field in ('true', 'false', '1', '0') -%}\n        try_to_boolean('{{ field }}')\n    {%- else -%}\n        try_to_boolean(to_varchar({{ field }}))\n    {%- endif -%}\n{%- elif target.type == 'sqlserver' -%}\n    {%- if field in ('true', 'false', '1', '0') -%}\n        try_convert(bit, '{{ field }}')\n    {%- else -%}\n        case\n            when len({{ field }}) > 0\n                then try_convert(bit, {{ field }})\n            else\n                try_convert(bit, null)\n        end\n    {%- endif -%}\n{%- endif -%}\n\n{# Warning if type casting will introduce null values for at least 1 record. #}\n{% if relation is defined %}\n    {% set query %}\n    select\n        count(*) as \"record_count\"\n    from \"{{ relation.database }}\".\"{{ relation.schema }}\".\"{{ relation.identifier }}\"\n    where {{ field }} is not null and\n        {% if target.type == 'snowflake' -%}\n            {%- if field in ('true', 'false', '1', '0') -%}\n                try_to_boolean('{{ field }}') is null\n            {%- else -%}\n                try_to_boolean(to_varchar({{ field }})) is null\n            {%- endif -%}\n        {% elif target.type == 'sqlserver' -%}\n            {%- if field in ('true', 'false', '1', '0') -%}\n                try_convert(bit, '{{ field }}') is null\n            {%- else -%}\n                case\n                    when len({{ field }}) > 0\n                        then try_convert(bit, {{ field }})\n                    else\n                        try_convert(bit, null)\n                end is null\n            {%- endif -%}\n        {%- endif -%}\n    {% endset %}\n\n    {% set result_query = run_query(query) %}\n    {% if execute %}\n        {% set record_count = result_query.columns['record_count'].values()[0] %}\n    {% else %}\n        {% set record_count = 0 %}\n    {% endif %}\n\n    {% if record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {{ log(tojson({'Key': 'ConvertBoolean', 'Details': {'relation_identifier': relation.identifier, 'field': field, 'record_count': record_count|string}, 'Category': 'UserWarning', 'Message': 'Failed to convert \\'' ~ relation.identifier ~ '.' ~ field ~ '\\' to a boolean for ' ~ record_count ~ ' records. Their values are set to NULL.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.838618, "supported_languages": null}, "macro.pm_utils.to_date": {"unique_id": "macro.pm_utils.to_date", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\to_date.sql", "original_file_path": "macros\\data_type_cast_functions\\to_date.sql", "name": "to_date", "macro_sql": "{%- macro to_date(field, relation) -%}\n\n{# Cast to date when the input is in a date or a datetime format. This is default behavior for SQL Server. #}\n{# Snowflake try_to function requires an expression of type varchar. #}\n{%- if target.type == 'snowflake' -%}\n    case\n        when try_to_date(to_varchar({{ field }}), '{{ var(\"date_format\", \"YYYY-MM-DD\") }}') is null\n            then {{ pm_utils.date_from_timestamp(field) }}\n        else try_to_date(to_varchar({{ field }}), '{{ var(\"date_format\", \"YYYY-MM-DD\") }}')\n    end\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ field }}) > 0\n            then try_convert(date, {{ field }}, {{ var(\"date_format\", 23) }})\n        else\n            try_convert(date, null)\n    end\n{%- endif -%}\n\n{# Warning if type casting will introduce null values for at least 1 record. #}\n{% if relation is defined %}\n    {% set query %}\n    select\n        count(*) as \"record_count\"\n    from \"{{ relation.database }}\".\"{{ relation.schema }}\".\"{{ relation.identifier }}\"\n    where {{ field }} is not null and\n        {% if target.type == 'snowflake' -%}\n            case\n                when try_to_date(to_varchar({{ field }}), '{{ var(\"date_format\", \"YYYY-MM-DD\") }}') is null\n                    then {{ pm_utils.date_from_timestamp(field) }}\n                else try_to_date(to_varchar({{ field }}), '{{ var(\"date_format\", \"YYYY-MM-DD\") }}')\n            end is null\n        {% elif target.type == 'sqlserver' -%}\n            case\n                when len({{ field }}) > 0\n                    then try_convert(date, {{ field }}, {{ var(\"date_format\", 23) }})\n                else\n                    try_convert(date, null)\n            end is null\n        {%- endif -%}\n    {% endset %}\n\n    {% set result_query = run_query(query) %}\n    {% if execute %}\n        {% set record_count = result_query.columns['record_count'].values()[0] %}\n    {% else %}\n        {% set record_count = 0 %}\n    {% endif %}\n\n    {% if record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {{ log(tojson({'Key': 'ConvertDate', 'Details': {'relation_identifier': relation.identifier, 'field': field, 'record_count': record_count|string}, 'Category': 'UserWarning', 'Message': 'Failed to convert \\'' ~ relation.identifier ~ '.' ~ field ~ '\\' to a date for ' ~ record_count ~ ' records. Their values are set to NULL.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.pm_utils.date_from_timestamp", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8476183, "supported_languages": null}, "macro.pm_utils.to_double": {"unique_id": "macro.pm_utils.to_double", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\to_double.sql", "original_file_path": "macros\\data_type_cast_functions\\to_double.sql", "name": "to_double", "macro_sql": "{%- macro to_double(field, relation) -%}\n\n{# Snowflake try_to function requires an expression of type varchar. #}\n{%- if target.type == 'snowflake' -%}\n    try_to_double(to_varchar({{ field }}))\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ field }}) > 0\n            then try_convert(float, {{ field }})\n        else\n            try_convert(float, null)\n    end\n{%- endif -%}\n\n{# Warning if type casting will introduce null values for at least 1 record. #}\n{% if relation is defined %}\n    {% set query %}\n    select\n        count(*) as \"record_count\"\n    from \"{{ relation.database }}\".\"{{ relation.schema }}\".\"{{ relation.identifier }}\"\n    where {{ field }} is not null and\n        {% if target.type == 'snowflake' -%}\n            try_to_double(to_varchar({{ field }})) is null\n        {% elif target.type == 'sqlserver' -%}\n            case\n                when len({{ field }}) > 0\n                    then try_convert(float, {{ field }})\n                else\n                    try_convert(float, null)\n            end is null\n        {%- endif -%}\n    {% endset %}\n\n    {% set result_query = run_query(query) %}\n    {% if execute %}\n        {% set record_count = result_query.columns['record_count'].values()[0] %}\n    {% else %}\n        {% set record_count = 0 %}\n    {% endif %}\n\n    {% if record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {{ log(tojson({'Key': 'ConvertDouble', 'Details': {'relation_identifier': relation.identifier, 'field': field, 'record_count': record_count|string}, 'Category': 'UserWarning', 'Message': 'Failed to convert \\'' ~ relation.identifier ~ '.' ~ field ~ '\\' to a double for ' ~ record_count ~ ' records. Their values are set to NULL.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8536186, "supported_languages": null}, "macro.pm_utils.to_integer": {"unique_id": "macro.pm_utils.to_integer", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\to_integer.sql", "original_file_path": "macros\\data_type_cast_functions\\to_integer.sql", "name": "to_integer", "macro_sql": "{%- macro to_integer(field, relation) -%}\n\n{# Snowflake try_to function requires an expression of type varchar. #}\n{%- if target.type == 'snowflake' -%}\n    try_to_number(to_varchar({{ field }}))\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ field }}) > 0\n            then try_convert(bigint, {{ field }})\n        else\n            try_convert(bigint, null)\n    end\n{%- endif -%}\n\n{# Warning if type casting will introduce null values for at least 1 record. #}\n{% if relation is defined %}\n    {% set query %}\n    select\n        count(*) as \"record_count\"\n    from \"{{ relation.database }}\".\"{{ relation.schema }}\".\"{{ relation.identifier }}\"\n    where {{ field }} is not null and\n        {% if target.type == 'snowflake' -%}\n            try_to_number(to_varchar({{ field }})) is null\n        {% elif target.type == 'sqlserver' -%}\n            case\n                when len({{ field }}) > 0\n                    then try_convert(bigint, {{ field }})\n                else\n                    try_convert(bigint, null)\n            end is null\n        {%- endif -%}\n    {% endset %}\n\n    {% set result_query = run_query(query) %}\n    {% if execute %}\n        {% set record_count = result_query.columns['record_count'].values()[0] %}\n    {% else %}\n        {% set record_count = 0 %}\n    {% endif %}\n\n    {% if record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {{ log(tojson({'Key': 'ConvertInteger', 'Details': {'relation_identifier': relation.identifier, 'field': field, 'record_count': record_count|string}, 'Category': 'UserWarning', 'Message': 'Failed to convert \\'' ~ relation.identifier ~ '.' ~ field ~ '\\' to an integer for ' ~ record_count ~ ' records. Their values are set to NULL.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.859619, "supported_languages": null}, "macro.pm_utils.to_timestamp": {"unique_id": "macro.pm_utils.to_timestamp", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\to_timestamp.sql", "original_file_path": "macros\\data_type_cast_functions\\to_timestamp.sql", "name": "to_timestamp", "macro_sql": "{%- macro to_timestamp(field, relation) -%}\n\n{# Snowflake try_to function requires an expression of type varchar. #}\n{%- if target.type == 'snowflake' -%}\n    try_to_timestamp(to_varchar({{ field }}), '{{ var(\"datetime_format\", \"YYYY-MM-DD hh24:mi:ss.ff3\") }}')\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ field }}) > 0\n            then try_convert(datetime2, {{ field }}, {{ var(\"datetime_format\", 21) }})\n        else\n            try_convert(datetime2, null)\n    end\n{%- endif -%}\n\n{# Warning if type casting will introduce null values for at least 1 record. #}\n{% if relation is defined %}\n    {% set query %}\n    select\n        count(*) as \"record_count\"\n    from \"{{ relation.database }}\".\"{{ relation.schema }}\".\"{{ relation.identifier }}\"\n    where {{ field }} is not null and\n        {% if target.type == 'snowflake' -%}\n            try_to_timestamp(to_varchar({{ field }}), '{{ var(\"datetime_format\", \"YYYY-MM-DD hh24:mi:ss.ff3\") }}') is null\n        {% elif target.type == 'sqlserver' -%}\n            case\n                when len({{ field }}) > 0\n                    then try_convert(datetime2, {{ field }}, {{ var(\"datetime_format\", 21) }})\n                else\n                    try_convert(datetime2, null)\n            end is null\n        {%- endif -%}\n    {% endset %}\n    \n    {% set result_query = run_query(query) %}\n    {% if execute %}\n        {% set record_count = result_query.columns['record_count'].values()[0] %}\n    {% else %}\n        {% set record_count = 0 %}\n    {% endif %}\n\n    {% if record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {{ log(tojson({'Key': 'ConvertDatetime', 'Details': {'relation_identifier': relation.identifier, 'field': field, 'record_count': record_count|string}, 'Category': 'UserWarning', 'Message': 'Failed to convert \\'' ~ relation.identifier ~ '.' ~ field ~ '\\' to a datetime for ' ~ record_count ~ ' records. Their values are set to NULL.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8666193, "supported_languages": null}, "macro.pm_utils.to_varchar": {"unique_id": "macro.pm_utils.to_varchar", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\data_type_cast_functions\\to_varchar.sql", "original_file_path": "macros\\data_type_cast_functions\\to_varchar.sql", "name": "to_varchar", "macro_sql": "{%- macro to_varchar(field) -%}\n\n{%- if target.type == 'snowflake' -%}\n    to_varchar({{ field }})\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when charindex(' ', {{ field }}) > 0\n            then convert(nvarchar(2000), {{ field }})\n        else\n            nullif(convert(nvarchar(2000), {{ field }}), '')\n    end\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8676178, "supported_languages": null}, "macro.pm_utils.dateadd": {"unique_id": "macro.pm_utils.dateadd", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\dateadd.sql", "original_file_path": "macros\\date_time_functions\\dateadd.sql", "name": "dateadd", "macro_sql": "{%- macro dateadd(datepart, number, date_or_datetime_field) -%}\n{%- if target.type == 'snowflake' -%}\n    dateadd({{ datepart }}, {{ number }}, try_to_timestamp(to_varchar({{ date_or_datetime_field }})))\n{%- elif target.type == 'sqlserver' -%}\n    dateadd({{ datepart }}, {{ number }}, try_convert(datetime2, {{ date_or_datetime_field }}))\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8696187, "supported_languages": null}, "macro.pm_utils.datediff": {"unique_id": "macro.pm_utils.datediff", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\datediff.sql", "original_file_path": "macros\\date_time_functions\\datediff.sql", "name": "datediff", "macro_sql": "{%- macro datediff(datepart, start_date_field, end_date_field) -%}\n\n{%- if target.type == 'snowflake' -%}\n    {# Snowflake week is defined from Monday to Sunday. Add one day to align computation for week differences. #}\n    {%- if datepart == 'week' -%}\n        datediff({{ datepart }}, dateadd(day, 1, {{ start_date_field }}), dateadd(day, 1, {{ end_date_field }}))\n    {%- else -%}\n        datediff({{ datepart }}, {{ start_date_field }}, {{ end_date_field }})\n    {%- endif -%}\n{%- elif target.type == 'sqlserver' -%}\n    datediff_big({{ datepart }}, {{ start_date_field }}, {{ end_date_field }})\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8706176, "supported_languages": null}, "macro.pm_utils.date_from_timestamp": {"unique_id": "macro.pm_utils.date_from_timestamp", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\date_from_timestamp.sql", "original_file_path": "macros\\date_time_functions\\date_from_timestamp.sql", "name": "date_from_timestamp", "macro_sql": "{%- macro date_from_timestamp(field) -%}\n\n{# Snowflake try_to function requires an expression of type varchar. #}\n{%- if target.type == 'snowflake' -%}\n    case\n        when len({{ field }}) > 0\n            then try_to_date(to_varchar({{ field }}))\n        else\n            to_date(null)\n    end\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ field }}) > 0\n            then try_convert(date, {{ field }})\n        else\n            try_convert(date, null)\n    end\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.87262, "supported_languages": null}, "macro.pm_utils.diff_weekdays": {"unique_id": "macro.pm_utils.diff_weekdays", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\diff_weekdays.sql", "original_file_path": "macros\\date_time_functions\\diff_weekdays.sql", "name": "diff_weekdays", "macro_sql": "{%- macro diff_weekdays(start_date_field, end_date_field) -%}\n\n{# Take two dates as input and compute the total number of days between the two dates. Also count it as one day in case the \"from date\" and the \"to date\" are on the same day. \nFrom this total number of days, we subtract the weekend days (Saturday and Sunday). We use the function datediff with parameter week.\nThis function returns 1 for every complete week, where a week is defined from Sunday to Saturday.\nSince the function only returns full weeks, we need to adjust the parameters to account for date ranges that start on Sunday or end at Saturday. #}\n{{ pm_utils.datediff('day', start_date_field, end_date_field) }} + 1\n- {{ pm_utils.datediff('week', start_date_field, pm_utils.dateadd('day', 1, end_date_field)) }}\n- {{ pm_utils.datediff('week', pm_utils.dateadd('day', -1, start_date_field), end_date_field) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.pm_utils.datediff", "macro.pm_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.874367, "supported_languages": null}, "macro.pm_utils.timestamp_from_date": {"unique_id": "macro.pm_utils.timestamp_from_date", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\timestamp_from_date.sql", "original_file_path": "macros\\date_time_functions\\timestamp_from_date.sql", "name": "timestamp_from_date", "macro_sql": "{%- macro timestamp_from_date(date_field) -%}\n\n{%- if target.type == 'snowflake' -%}\n    case\n        when len({{ date_field }}) > 0\n            then timestamp_from_parts({{ date_field }}, '0')\n        else\n            timestamp_from_parts(null, null)\n    end\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ date_field }}) > 0\n            then datetime2fromparts(\n                    datepart(year, {{ date_field }}),\n                    datepart(month, {{ date_field }}),\n                    datepart(day, {{ date_field }}),\n                    0,\n                    0,\n                    0,\n                    0,\n                    3\n                )\n        else\n            datetime2fromparts(\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3\n            )\n    end\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8766203, "supported_languages": null}, "macro.pm_utils.timestamp_from_parts": {"unique_id": "macro.pm_utils.timestamp_from_parts", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\timestamp_from_parts.sql", "original_file_path": "macros\\date_time_functions\\timestamp_from_parts.sql", "name": "timestamp_from_parts", "macro_sql": "{%- macro timestamp_from_parts(date_field, time_field) -%}\n\n{%- if target.type == 'snowflake' -%}\n    case\n        when len({{ date_field }}) > 0 and len({{ time_field }}) > 0\n            then timestamp_from_parts({{ date_field }}, try_to_time({{ time_field }}, '{{ var(\"time_format\", \"hh24:mi:ss.ff3\") }}'))\n        else\n            timestamp_from_parts(null, null)\n    end\n{%- elif target.type == 'sqlserver' -%}\n    case\n        when len({{ date_field }}) > 0 and len({{time_field}}) > 0\n            then datetime2fromparts(\n                    datepart(year, {{ date_field }}),\n                    datepart(month, {{ date_field }}),\n                    datepart(day, {{ date_field }}),\n                    datepart(hour, try_convert(time, {{ time_field }}, {{ var(\"time_format\", 14) }})),\n                    datepart(minute, try_convert(time, {{ time_field }}, {{ var(\"time_format\", 14) }})),\n                    datepart(second, try_convert(time, {{ time_field }}, {{ var(\"time_format\", 14) }})),\n                    datepart(millisecond, try_convert(time, {{ time_field }}, {{ var(\"time_format\", 14) }})),\n                    3\n                )\n        else\n            datetime2fromparts(\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3\n            )\n    end\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8806188, "supported_languages": null}, "macro.pm_utils.date_difference_with_weekend_adjustment": {"unique_id": "macro.pm_utils.date_difference_with_weekend_adjustment", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\date_time_functions\\workinghours.sql", "original_file_path": "macros\\date_time_functions\\workinghours.sql", "name": "date_difference_with_weekend_adjustment", "macro_sql": "{% macro date_difference_with_weekend_adjustment(relation, start_date, end_date, unit) %}\r\n    {# SQL fonksiyonlar\u0131n\u0131 kullanarak start ve end tarihlerini haftai\u00e7i g\u00fcnlere g\u00f6re ayarl\u0131yoruz #}\r\n    \r\n    {% set start_dt = \"CAST(\" ~ start_date ~ \" AS DATETIME)\" %}\r\n    {% set end_dt = \"CAST(\" ~ end_date ~ \" AS DATETIME)\" %}\r\n\r\n    {# Ba\u015flang\u0131\u00e7 tarihini hafta i\u00e7ine ayarlama #}\r\n    {% set adjusted_start_dt = \"\"\"\r\n        CASE\r\n            WHEN DATEPART(WEEKDAY, {{ start_dt }}) = 7 THEN DATEADD(DAY, 1, CAST({{ start_dt }} AS DATETIME)) -- Cumartesi ise Pazar\r\n            WHEN DATEPART(WEEKDAY, {{ start_dt }}) = 1 THEN DATEADD(DAY, 1, CAST({{ start_dt }} AS DATETIME)) -- Pazar ise Pazartesi\r\n            ELSE {{ start_dt }}\r\n        END\r\n    \"\"\" %}\r\n\r\n    {# Biti\u015f tarihini hafta i\u00e7ine ayarlama #}\r\n    {% set adjusted_end_dt = \"\"\"\r\n        CASE\r\n            WHEN DATEPART(WEEKDAY, {{ end_dt }}) = 7 THEN DATEADD(DAY, -1, CAST({{ end_dt }} AS DATETIME)) -- Cumartesi ise bir \u00f6nceki Cuma\r\n            WHEN DATEPART(WEEKDAY, {{ end_dt }}) = 1 THEN DATEADD(DAY, -2, CAST({{ end_dt }} AS DATETIME)) -- Pazar ise bir \u00f6nceki Cuma\r\n            ELSE {{ end_dt }}\r\n        END\r\n    \"\"\" %}\r\n\r\n    {# Toplam i\u015f saatlerini hesaplama (9:00 - 18:00 aras\u0131) #}\r\n    {% set total_seconds_sql = \"\"\"\r\n        DATEDIFF(SECOND, \r\n            CASE\r\n                WHEN CAST({{ adjusted_start_dt }} AS TIME) < '09:00' THEN CAST({{ adjusted_start_dt }} AS DATE) + '09:00'\r\n                WHEN CAST({{ adjusted_start_dt }} AS TIME) > '18:00' THEN CAST({{ adjusted_start_dt }} AS DATE) + '18:00'\r\n                ELSE {{ adjusted_start_dt }}\r\n            END,\r\n            CASE\r\n                WHEN CAST({{ adjusted_end_dt }} AS TIME) < '09:00' THEN CAST({{ adjusted_end_dt }} AS DATE) + '09:00'\r\n                WHEN CAST({{ adjusted_end_dt }} AS TIME) > '18:00' THEN CAST({{ adjusted_end_dt }} AS DATE) + '18:00'\r\n                ELSE {{ adjusted_end_dt }}\r\n            END\r\n        )\r\n    \"\"\" %}\r\n\r\n    {# Sonu\u00e7lar\u0131 istenilen birime \u00e7evirme #}\r\n    {% if unit == 'seconds' %}\r\n        {{ total_seconds_sql }}\r\n    {% elif unit == 'minutes' %}\r\n        {{ total_seconds_sql }} / 60\r\n    {% elif unit == 'hours' %}\r\n        {{ total_seconds_sql }} / 3600\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8836188, "supported_languages": null}, "macro.pm_utils.create_index": {"unique_id": "macro.pm_utils.create_index", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\SQL_generators\\create_index.sql", "original_file_path": "macros\\SQL_generators\\create_index.sql", "name": "create_index", "macro_sql": "{%- macro create_index(source_relation) -%}\n\n{%- if target.type == 'sqlserver' -%}\n    {%- if source_relation is defined -%}\n        drop index if exists cci on {{ source_relation }};\n        create clustered columnstore index cci on {{ source_relation }};\n    {%- else -%}\n        drop index if exists cci on {{ this }};\n        create clustered columnstore index cci on {{ this }};\n    {%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8846188, "supported_languages": null}, "macro.pm_utils.id": {"unique_id": "macro.pm_utils.id", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\SQL_generators\\id.sql", "original_file_path": "macros\\SQL_generators\\id.sql", "name": "id", "macro_sql": "{%- macro id() -%}\n\nrow_number() over (order by (select null))\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8846188, "supported_languages": null}, "macro.pm_utils.mandatory": {"unique_id": "macro.pm_utils.mandatory", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\SQL_generators\\mandatory.sql", "original_file_path": "macros\\SQL_generators\\mandatory.sql", "name": "mandatory", "macro_sql": "{%- macro mandatory(relation, mandatory_column, data_type) -%}\n\n{%- if data_type == 'boolean' -%}\n    {{ pm_utils.to_boolean(mandatory_column, relation) }}\n{%- elif data_type == 'date' -%}\n    {{ pm_utils.to_date(mandatory_column, relation) }}\n{%- elif data_type == 'double' -%}\n    {{ pm_utils.to_double(mandatory_column, relation) }}\n{%- elif data_type == 'integer' -%}\n    {{ pm_utils.to_integer(mandatory_column, relation) }}\n{%- elif data_type == 'datetime' -%}\n    {{ pm_utils.to_timestamp(mandatory_column, relation) }}\n{%- elif data_type == 'text' -%}\n    {{ pm_utils.to_varchar(mandatory_column) }}\n{%- elif data_type == 'id' -%}\n    {{ pm_utils.to_integer(mandatory_column, relation) }}\n{%- else -%}\n    {{ pm_utils.to_varchar(mandatory_column) }}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.pm_utils.to_boolean", "macro.pm_utils.to_date", "macro.pm_utils.to_double", "macro.pm_utils.to_integer", "macro.pm_utils.to_timestamp", "macro.pm_utils.to_varchar"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8886197, "supported_languages": null}, "macro.pm_utils.optional": {"unique_id": "macro.pm_utils.optional", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\SQL_generators\\optional.sql", "original_file_path": "macros\\SQL_generators\\optional.sql", "name": "optional", "macro_sql": "{%- macro optional(relation, optional_column, data_type) -%}\n\n{# When the relation is not defined (optional tables), set the columns and relation to empty #}\n{%- if load_relation(relation) is none -%}\n    {%- set columns = [] -%}\n    {%- set relation = null -%}\n{%- else -%}\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n{%- endif -%}\n\n{# Check if relation is a source based on whether the relation's schema and identifier is defined as source. \nOnly check when relation exists to prevent dbt compile errors. #}\n{%- set ns = namespace(is_source_relation = false) -%}\n\n{% if execute and relation != null %}\n    {% for node in graph.sources.values() -%}\n        {% if node.schema == relation.schema and node.identifier == relation.identifier %}\n            {% set ns.is_source_relation = true %}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{# Create list of column names.#}\n{%- set column_names = [] -%}\n{%- for column in columns -%}\n        {%- set column_names = column_names.append('\"' + column.name + '\"') -%}\n{%- endfor -%}\n\n{# When the column is in the list, use the column, otherwise create the column with null values.#}\n{%- if optional_column in column_names -%}\n    {% set column_value = optional_column -%}\n{%- else -%}\n    {% set column_value = 'null' -%}\n{%- endif -%}\n\n{# Apply casting when relation is a source or when the field doesn't exist and is being created. #}\n{% if ns.is_source_relation or column_value == 'null' %}\n    {%- if data_type == 'boolean' -%}\n        {{ pm_utils.to_boolean(column_value, relation) }}\n    {%- elif data_type == 'date' -%}\n        {{ pm_utils.to_date(column_value, relation) }}\n    {%- elif data_type == 'double' -%}\n        {{ pm_utils.to_double(column_value, relation) }}\n    {%- elif data_type == 'integer' -%}\n        {{ pm_utils.to_integer(column_value, relation) }}\n    {%- elif data_type == 'datetime' -%}\n        {{ pm_utils.to_timestamp(column_value, relation) }}\n    {%- elif data_type == 'text' -%}\n        {{ pm_utils.to_varchar(column_value) }}\n    {%- elif data_type == 'id' -%}\n        {% if optional_column in column_names %}\n            {{ pm_utils.to_integer(column_value, relation) }}\n        {% else %}\n            row_number() over (order by (select null))\n        {% endif %}\n    {%- else -%}\n        {{ pm_utils.to_varchar(column_value) }}\n    {%- endif -%}\n{# Don't apply casting when relation is not a source. Casting should already have been done in a previous transformation step. #}\n{%- else -%}\n    {{ column_value }}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.pm_utils.to_boolean", "macro.pm_utils.to_date", "macro.pm_utils.to_double", "macro.pm_utils.to_integer", "macro.pm_utils.to_timestamp", "macro.pm_utils.to_varchar"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8956172, "supported_languages": null}, "macro.pm_utils.optional_table": {"unique_id": "macro.pm_utils.optional_table", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\SQL_generators\\optional_table.sql", "original_file_path": "macros\\SQL_generators\\optional_table.sql", "name": "optional_table", "macro_sql": "{%- macro optional_table(source_table) -%}\n\n{%- set source_relation = adapter.get_relation(\n    database=source_table.database,\n    schema=source_table.schema,\n    identifier=source_table.name) -%}\n\n{# When source table does not exist, create an empty table in the target schema that will be queried instead. #}\n{%- if source_relation is not none -%}\n    {{ source_table }}\n{%- else -%}\n    {% set query %}\n        {% if target.type == 'snowflake' %}\n            create or replace table \"{{ target.database }}\".\"{{ target.schema }}\".\"{{ source_table.name }}\" (dummy int)\n        {% elif target.type == 'sqlserver' %}\n            if object_id('\"{{ target.database }}\".\"{{ target.schema }}\".\"{{ source_table.name }}\"', 'U') is null\n            create table \"{{ target.database }}\".\"{{ target.schema }}\".\"{{ source_table.name }}\" (dummy int)\n        {% endif %}\n    {% endset %}\n\n    {% do run_query(query) %}\n        \"{{ target.database }}\".\"{{ target.schema }}\".\"{{ source_table.name }}\"\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.8986537, "supported_languages": null}, "macro.pm_utils.star": {"unique_id": "macro.pm_utils.star", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\SQL_generators\\star.sql", "original_file_path": "macros\\SQL_generators\\star.sql", "name": "star", "macro_sql": "{% macro star(relation, except) %}\n\n{%- set selects = [] -%}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{# If the except parameter is defined, we will only select the columns that are not in the except list. #}\n{% if except is defined %}\n    {%- for column in columns -%}\n        {%- if column.name not in except -%}\n                {%- set selects = selects.append('\"' + relation.identifier + '\".\"' + column.name + '\"') -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {# Generate the select statements in a later step to not put a comma after the last select. #}\n    {% for select in selects %}\n        {{ select }}\n        {%- if not loop.last -%}\n            ,\n        {%- endif -%}\n    {% endfor %}\n{% else %}\n        \"{{ relation.identifier }}\".*\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.900654, "supported_languages": null}, "macro.pm_utils.charindex": {"unique_id": "macro.pm_utils.charindex", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\string_functions\\charindex.sql", "original_file_path": "macros\\string_functions\\charindex.sql", "name": "charindex", "macro_sql": "{%- macro charindex(expression_to_find, field, start_location=None) -%}\n{%- set expression_length -%}\n    {% if target.type == 'sqlserver' -%}\n        datalength('{{ expression_to_find }}')\n    {% else -%}\n        length('{{ expression_to_find }}')\n    {% endif -%}\n{%- endset -%}\ncase\n    when {{ expression_length }} > 0\n    then\n        {% if start_location is none -%}\n            charindex('{{ expression_to_find }}', {{ field }})\n        {% else -%}\n            charindex('{{ expression_to_find }}', {{ field }}, {{ start_location }})\n        {% endif -%}\n    else\n        0\nend\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.9016545, "supported_languages": null}, "macro.pm_utils.concat": {"unique_id": "macro.pm_utils.concat", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\string_functions\\concat.sql", "original_file_path": "macros\\string_functions\\concat.sql", "name": "concat", "macro_sql": "{%- macro concat() -%}\n\nconcat(\n{%- for argument in varargs -%}\n    coalesce({{ argument }}, '')\n    {%- if not loop.last -%}\n        ,\n    {%- endif -%}\n{%- endfor -%}\n)\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.902654, "supported_languages": null}, "macro.pm_utils.test_equal_rowcount": {"unique_id": "macro.pm_utils.test_equal_rowcount", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_equal_rowcount.sql", "original_file_path": "macros\\tests\\test_equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\nselect abs(count_a - count_b) as diff_count\nfrom (select count(*) as count_a from {{ model }}) as model_a\n    cross join (select count(*) as count_b from \"{{ model.schema }}\".\"{{ compare_model }}\") as model_b\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.903753, "supported_languages": null}, "macro.pm_utils.test_exists": {"unique_id": "macro.pm_utils.test_exists", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_exists.sql", "original_file_path": "macros\\tests\\test_exists.sql", "name": "test_exists", "macro_sql": "{% macro test_exists(model, column_name) %}\n\n{% set table_exists = load_relation(model) is not none %}\n\n{# Set severity for the user-friendly log message when the test fails. #}\n{% if config.get('severity') == 'warn' %}\n    {% set log_category = 'UserWarning' %}\n{% elif config.get('severity') == 'error' %}\n    {% set log_category = 'UserError' %}\n{% else %}\n    {% set log_category = 'UserError' %}\n{% endif %}\n\n{# If the test is for a column and the table doesn't exist, we return success to prevent the same error multiple times. #}\n{% if column_name is defined and not table_exists %}\n    select 'dummy_value' as \"dummy\"\n    where 1 = 0\n{# If column_name is defined, the test is on a column level. #}\n{% elif column_name is defined and table_exists %}\n    {# Get columns in the relation to check if the field exists. #}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {%- set column_names = [] -%}\n    {%- for column in columns -%}\n        {%- set column_names = column_names.append('\"' + column.name + '\"') -%}\n    {%- endfor -%}\n\n    {% if column_name in column_names %}\n        select 'dummy_value' as \"dummy\"\n        where 1 = 0\n    {% else %}\n        select 'dummy_value' as \"dummy\"\n        {% if var(\"log_result\", False) == True and execute %}\n            {{ log(tojson({'Key': 'TestExistsColumn', 'Details': {'model_name': model.name, 'column_name': column_name}, 'Category': log_category, 'Message': 'The field \\'' ~ model.name ~ '.' ~ column_name ~ '\\' doesn\\'t exist in the source data. Note that the field detection is case-sensitive.'}), True) }}\n        {% endif %}\n    {% endif %}\n{# If column_name is not defined, the test is on a table level. #}\n{% elif column_name is not defined %}\n    {% if table_exists %}\n        select 'dummy_value' as \"dummy\"\n        where 1 = 0\n    {% else %}\n        select 'dummy_value' as \"dummy\"\n        {% if var(\"log_result\", False) == True and execute %}\n            {{ log(tojson({'Key': 'TestExistsTable', 'Details': {'model_name': model.name}, 'Category': log_category, 'Message': 'The table \\'' ~ model.name ~ '\\' doesn\\'t exist in the source data. Note that the name is case-sensitive.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.9106777, "supported_languages": null}, "macro.pm_utils.test_not_negative": {"unique_id": "macro.pm_utils.test_not_negative", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_not_negative.sql", "original_file_path": "macros\\tests\\test_not_negative.sql", "name": "test_not_negative", "macro_sql": "{% macro test_not_negative(model, column_name) %}\n\nselect {{ column_name }}\nfrom {{ model }}\nwhere {{ column_name }} < 0 \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.9106777, "supported_languages": null}, "macro.pm_utils.test_not_null": {"unique_id": "macro.pm_utils.test_not_null", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_not_null.sql", "original_file_path": "macros\\tests\\test_not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model, column_name) %}\n\n{# Get columns in the relation to check if the field exists. #}\n{%- set columns = adapter.get_columns_in_relation(model) -%}\n\n{%- set column_names = [] -%}\n{%- for column in columns -%}\n    {%- set column_names = column_names.append('\"' + column.name + '\"') -%}\n{%- endfor -%}\n\n{# Only execute test when field exists. Otherwise execute a dummy test that always succeeds. #}\n{% if column_name in column_names %}\n    {# Query the records that fail the test. #}\n    {%- if target.type == 'snowflake' -%}\n        select {{ column_name }}\n        from {{ model }}\n        where ({{ column_name }}) is null or len({{ column_name }}) = 0\n    {%- elif target.type == 'sqlserver' -%}\n        select {{ column_name }}\n        from {{ model }}\n        where {{ column_name }} is null or datalength({{ column_name }}) = 0\n    {%- endif -%}\n    \n    {# Query to get the record count when executing the test. #}\n    {% set query %}\n        {%- if target.type == 'snowflake' -%}\n            select count(*) as \"test_record_count\"\n            from {{ model }}\n            where {{ column_name }} is null or len({{ column_name }}) = 0\n        {%- elif target.type == 'sqlserver' -%}\n            select count(*) as \"test_record_count\"\n            from {{ model }}\n            where {{ column_name }} is null or datalength({{ column_name }}) = 0\n        {%- endif -%}\n    {% endset %}\n\n    {% set result = run_query(query) %}\n\n    {% if execute %}\n        {% set test_record_count = result.columns['test_record_count'].values()[0] %}\n    {% else %}\n        {% set test_record_count = 0 %}\n    {% endif %}\n\n    {# User-friendly log message when the test fails. #}\n    {% if test_record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {% if config.get('severity') == 'warn' %}\n                {% set log_category = 'UserWarning' %}\n            {% elif config.get('severity') == 'error' %}\n                {% set log_category = 'UserError' %}\n            {% else %}\n                {% set log_category = 'UserError' %}\n            {% endif %}\n            {{ log(tojson({'Key': 'TestNotNull', 'Details': {'model_name': model.name, 'column_name': column_name}, 'Category': log_category, 'Message': 'The field \\'' ~ model.name ~ '.' ~ column_name ~ '\\' shouldn\\'t contain NULL or empty values.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% else %}\n    select 'dummy_value' as \"dummy\"\n    where 1 = 0\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.9176767, "supported_languages": null}, "macro.pm_utils.test_one_column_not_null": {"unique_id": "macro.pm_utils.test_one_column_not_null", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_one_column_not_null.sql", "original_file_path": "macros\\tests\\test_one_column_not_null.sql", "name": "test_one_column_not_null", "macro_sql": "{% macro test_one_column_not_null(model, columns) %}\n\n{# Get columns in the relation to check if the fields exist. #}\n{%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n\n{%- set column_names = [] -%}\n{%- for column in columns_in_relation -%}\n    {%- set column_names = column_names.append(column.name) -%}\n{%- endfor -%}\n\n{%- set ns = namespace(execute_test = true) -%}\n\n{% for column in columns %}\n    {% if column not in column_names %}\n        {%- set ns.execute_test = false -%}\n    {%- endif -%}\n{%- endfor -%}\n\n{# Only execute test when all fields exist. Otherwise execute a dummy test that always succeeds. #}\n{% if ns.execute_test %}\n    {% set column_list = [] %}\n    {% for column in columns %}\n        {% set column_list = column_list.append('case when \"' + column + '\" is not null then 1 else 0 end') %}\n    {% endfor %}\n    {% set calculation = column_list | join('\\n    + ') %}\n\n    {# Query the records that fail the test. #}\n    select *\n    from {{ model }}\n    where {{ calculation }} <> 1\n\n    {# Query to get the record count when executing the test. #}\n    {% set query %}\n        select count(*) as \"test_record_count\"\n        from {{ model }}\n        where {{ calculation }} <> 1\n    {% endset %}\n\n    {% set result = run_query(query) %}\n\n    {% if execute %}\n        {% set test_record_count = result.columns['test_record_count'].values()[0] %}\n    {% else %}\n        {% set test_record_count = 0 %}\n    {% endif %}\n\n    {# User-friendly log message when the test fails. #}\n    {% if test_record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {# Generate variable part of log text. #}\n            {% set log_text_list = [] %}\n            {% for column in columns %}\n                {% if loop.index < (columns|length - 1) %}\n                    {% set log_entry = \"'\" ~ column ~ \"', \" %}\n                {% elif loop.index == columns|length - 1 %}\n                    {% set log_entry = \"'\" ~ column ~ \"' and \" %}\n                {% else %}\n                    {% set log_entry = \"'\" ~ column ~ \"'\" %}\n                {% endif %}\n                {% set log_text_list = log_text_list.append(log_entry) %}\n            {% endfor %}\n            {% set log_text = log_text_list | join('') %}\n            {# Define log category. #}\n            {% if config.get('severity') == 'warn' %}\n                {% set log_category = 'UserWarning' %}\n            {% elif config.get('severity') == 'error' %}\n                {% set log_category = 'UserError' %}\n            {% else %}\n                {% set log_category = 'UserError' %}\n            {% endif %}\n            {{ log(tojson({'Key': 'TestOneColumnNotNull', 'Details': {'model_name': model.name, 'log_text': log_text}, 'Category': log_category, 'Message': 'The table \\'' ~ model.name ~ '\\' contains records that have values in multiple fields for ' ~ log_text ~ '. Make sure that only one field has a value and the others are NULL in each record.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% else %}\n    select 'dummy_value' as \"dummy\"\n    where 1 = 0\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.9266784, "supported_languages": null}, "macro.pm_utils.test_unique": {"unique_id": "macro.pm_utils.test_unique", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_unique.sql", "original_file_path": "macros\\tests\\test_unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model, column_name) %}\n\n{# Get columns in the relation to check if the field exists. #}\n{%- set columns = adapter.get_columns_in_relation(model) -%}\n\n{%- set column_names = [] -%}\n{%- for column in columns -%}\n    {%- set column_names = column_names.append('\"' + column.name + '\"') -%}\n{%- endfor -%}\n\n{# Only execute test when field exists. Otherwise execute a dummy test that always succeeds. #}\n{% if column_name in column_names %}\n    {# Query the records that fail the test. #}\n    select {{ column_name }}\n    from {{ model }}\n    group by {{ column_name }}\n    having count(*) > 1\n\n    {# Query to get the record count when executing the test. #}\n    {% set query %}\n        select count(*) as \"test_record_count\"\n        from (\n            select {{ column_name }}\n            from {{ model }}\n            group by {{ column_name }}\n            having count(*) > 1) as \"table_grouped\"\n    {% endset %}\n\n    {% set result = run_query(query) %}\n\n    {% if execute %}\n        {% set test_record_count = result.columns['test_record_count'].values()[0] %}\n    {% else %}\n        {% set test_record_count = 0 %}\n    {% endif %}\n\n    {# User-friendly log message when the test fails. #}\n    {% if test_record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {% if config.get('severity') == 'warn' %}\n                {% set log_category = 'UserWarning' %}\n            {% elif config.get('severity') == 'error' %}\n                {% set log_category = 'UserError' %}\n            {% else %}\n                {% set log_category = 'UserError' %}\n            {% endif %}\n            {{ log(tojson({'Key': 'TestUnique', 'Details': {'model_name': model.name, 'column_name': column_name}, 'Category': log_category, 'Message': 'There are duplicate values in \\'' ~ model.name ~ '.' ~ column_name ~ '\\'. Make sure that all records have unique values.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% else %}\n    select 'dummy_value' as \"dummy\"\n    where 1 = 0\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.9316764, "supported_languages": null}, "macro.pm_utils.test_unique_combination_of_columns": {"unique_id": "macro.pm_utils.test_unique_combination_of_columns", "package_name": "pm_utils", "root_path": "c:\\Users\\burak.cucu\\OneDrive - UiPath\\Desktop\\WorkingHours\\dbt_packages\\pm_utils", "path": "macros\\tests\\test_unique_combination_of_columns.sql", "original_file_path": "macros\\tests\\test_unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, combination_of_columns) %}\n\n{# Get columns in the relation to check if the fields exist. #}\n{%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n\n{%- set column_names = [] -%}\n{%- for column in columns_in_relation -%}\n    {%- set column_names = column_names.append(column.name) -%}\n{%- endfor -%}\n\n{%- set ns = namespace(execute_test = true) -%}\n\n{% for column in combination_of_columns %}\n    {% if column not in column_names %}\n        {%- set ns.execute_test = false -%}\n    {%- endif -%}\n{%- endfor -%}\n\n{# Only execute test when all fields exist. Otherwise execute a dummy test that always succeeds. #}\n{% if ns.execute_test %}\n    {% set column_list = [] %}\n    {% for column in combination_of_columns %}\n        {% set column_list = column_list.append('\"' + column + '\"') %}\n    {% endfor %}\n\n    {% set columns_csv = column_list | join(', ') %}\n\n    {# Query the records that fail the test. #}\n    select {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n    {# Query to get the record count when executing the test. #}\n    {% set query %}\n        select count(*) as \"test_record_count\"\n        from (\n            select {{ columns_csv }}\n            from {{ model }}\n            group by {{ columns_csv }}\n            having count(*) > 1) as \"table_grouped\"\n    {% endset %}\n\n    {% set result = run_query(query) %}\n\n    {% if execute %}\n        {% set test_record_count = result.columns['test_record_count'].values()[0] %}\n    {% else %}\n        {% set test_record_count = 0 %}\n    {% endif %}\n\n    {# User-friendly log message when the test fails. #}\n    {% if test_record_count > 0 %}\n        {% if var(\"log_result\", False) == True %}\n            {# Generate variable part of log text. #}\n            {% set log_text_list = [] %}\n            {% for column in combination_of_columns %}\n                {% if loop.index < (combination_of_columns|length - 1) %}\n                    {% set log_entry = \"'\" ~ model.name ~ '.' ~ '\"' ~ column ~ '\"' ~ \"', \" %}\n                {% elif loop.index == combination_of_columns|length - 1 %}\n                    {% set log_entry = \"'\" ~ model.name ~ '.' ~ '\"' ~ column ~ '\"' ~ \"' and \" %}\n                {% else %}\n                    {% set log_entry = \"'\" ~ model.name ~ '.' ~ '\"' ~ column ~ '\"' ~ \"'\" %}\n                {% endif %}\n                {% set log_text_list = log_text_list.append(log_entry) %}\n            {% endfor %}\n            {% set log_text = log_text_list | join('') %}\n            {# Define log category. #}\n            {% if config.get('severity') == 'warn' %}\n                {% set log_category = 'UserWarning' %}\n            {% elif config.get('severity') == 'error' %}\n                {% set log_category = 'UserError' %}\n            {% else %}\n                {% set log_category = 'UserError' %}\n            {% endif %}\n            {{ log(tojson({'Key': 'TestUniqueCombinationOfColumns', 'Details': {'log_text': log_text}, 'Category': log_category, 'Message': 'There are duplicate values in the combination of the fields ' ~ log_text ~ '. Make sure all records have a unique combination of values for these fields.'}), True) }}\n        {% endif %}\n    {% endif %}\n{% else %}\n    select 'dummy_value' as \"dummy\"\n    where 1 = 0\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727591480.940796, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\virtualEnv\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.L2O.Metadata_PrecomputedValues": ["model.L2O.Cases", "model.L2O.Event_log"], "model.L2O.Event_log_input": ["source.L2O.sources.Event_log_raw", "source.L2O.sources.Event_log_raw"], "model.L2O.Cases": ["model.L2O.Event_log_input"], "model.L2O.Activity_configuration": ["seed.L2O.Activity_configuration_raw"], "model.L2O.Automation_estimates": ["seed.L2O.Automation_estimates_raw"], "model.L2O.Event_log": ["model.L2O.Activity_configuration", "model.L2O.Automation_estimates", "model.L2O.Cases", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input", "model.L2O.Event_log_input"], "model.L2O.Due_dates": ["model.L2O.Cases", "model.L2O.Due_dates_configuration", "model.L2O.Event_log"], "model.L2O.Due_dates_configuration": ["seed.L2O.Due_dates_configuration_raw"], "model.L2O.Tags": ["model.L2O.Cases", "model.L2O.Event_log"], "seed.L2O.Activity_configuration_raw": [], "seed.L2O.Automation_estimates_raw": [], "seed.L2O.Due_dates_configuration_raw": [], "test.L2O.pm_utils_source_exists_sources_Event_log_raw_.eae1483ed6": ["source.L2O.sources.Event_log_raw"], "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Activity_.9b19520fac": ["source.L2O.sources.Event_log_raw"], "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Activity_.5d56f44bb8": ["source.L2O.sources.Event_log_raw"], "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Case_ID_.0f866aa594": ["source.L2O.sources.Event_log_raw"], "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Case_ID_.e978fef3b3": ["source.L2O.sources.Event_log_raw"], "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Event_end_.4c7d9176e0": ["source.L2O.sources.Event_log_raw"], "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Event_end_.4d5752ea60": ["source.L2O.sources.Event_log_raw"], "source.L2O.sources.Event_log_raw": []}, "child_map": {"model.L2O.Metadata_PrecomputedValues": [], "model.L2O.Event_log_input": ["model.L2O.Cases", "model.L2O.Event_log", "model.L2O.Event_log", "model.L2O.Event_log", "model.L2O.Event_log", "model.L2O.Event_log", "model.L2O.Event_log", "model.L2O.Event_log"], "model.L2O.Cases": ["model.L2O.Due_dates", "model.L2O.Event_log", "model.L2O.Metadata_PrecomputedValues", "model.L2O.Tags"], "model.L2O.Activity_configuration": ["model.L2O.Event_log"], "model.L2O.Automation_estimates": ["model.L2O.Event_log"], "model.L2O.Event_log": ["model.L2O.Due_dates", "model.L2O.Metadata_PrecomputedValues", "model.L2O.Tags"], "model.L2O.Due_dates": [], "model.L2O.Due_dates_configuration": ["model.L2O.Due_dates"], "model.L2O.Tags": [], "seed.L2O.Activity_configuration_raw": ["model.L2O.Activity_configuration"], "seed.L2O.Automation_estimates_raw": ["model.L2O.Automation_estimates"], "seed.L2O.Due_dates_configuration_raw": ["model.L2O.Due_dates_configuration"], "test.L2O.pm_utils_source_exists_sources_Event_log_raw_.eae1483ed6": [], "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Activity_.9b19520fac": [], "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Activity_.5d56f44bb8": [], "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Case_ID_.0f866aa594": [], "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Case_ID_.e978fef3b3": [], "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Event_end_.4c7d9176e0": [], "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Event_end_.4d5752ea60": [], "source.L2O.sources.Event_log_raw": ["model.L2O.Event_log_input", "model.L2O.Event_log_input", "test.L2O.pm_utils_source_exists_sources_Event_log_raw_.eae1483ed6", "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Activity_.9b19520fac", "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Case_ID_.0f866aa594", "test.L2O.pm_utils_source_exists_sources_Event_log_raw__Event_end_.4c7d9176e0", "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Activity_.5d56f44bb8", "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Case_ID_.e978fef3b3", "test.L2O.pm_utils_source_not_null_sources_Event_log_raw__Event_end_.4d5752ea60"]}}